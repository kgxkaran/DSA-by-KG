vector<int> intersection(vector<int> &arr1, vector<int> &arr2) {
        vector<int>ans;
        
        int n = arr1.size();
        int m = arr2.size();
        int i = 0, j = 0;
        
        while((i < n)  &&  (j < m)){
            if((i > 0) && (arr1[i] == arr1[i-1])){ i++; continue; };
            if(arr1[i] < arr2[j]) i++;
            else if(arr1[i] > arr2[j]) j++;
            else{
                ans.push_back(arr1[i]);
                i++;
                j++;
            }
        }
        
        return ans;
    }











//if arrays are not sorted [Optimized code]

vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {

        vector<int>ans;
        sort(nums1.begin() , nums1.end());
        sort(nums2.begin() , nums2.end());

        int n = nums1.size();
        int m = nums2.size();
        int i = 0;
        int j = 0;

        while((i < n) && (j < m)){
            if((i > 0) && (nums1[i] == nums1[i-1])){
                i++;
                continue;
            }
            if(nums1[i] < nums2[j]) i++;
            else if(nums1[i] > nums2[j]) j++;
            else{
                ans.push_back(nums1[i]);
                i++;
                j++;
            }
        }

        
        return ans;
        
    }
